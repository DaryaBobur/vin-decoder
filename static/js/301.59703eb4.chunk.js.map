{"version":3,"file":"static/js/301.59703eb4.chunk.js","mappings":"mIAEMA,EAAW,CACb,CAAEC,KAAM,IAAKC,KAAM,WACnB,CAAED,KAAM,aAAcC,KAAM,cA2B9B,IAxBe,WACX,OACI,6BACI,wBACKF,EAASG,KAAI,YAAqB,IAAlBF,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACnB,OAAGD,EAAKG,SAAS,eAET,yBACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBC,KADfD,IAOb,yBACI,SAAC,KAAD,CAASI,GAAIJ,EAAMK,KAAG,EAAtB,SAAwBJ,KADnBD,EAIhB,OAIhB,C,4CCdH,IAbe,WACX,OACI,0BACA,SAAC,KAAD,CACIM,SAAS,EACTC,OAAO,MACPC,MAAM,MACNC,MAAM,WAIjB,C,iKCWD,EAtBuB,SAAC,GAAe,IAC/BC,EAD8B,EAAZC,MACLC,KAAKC,QAExB,OAAoB,IAAhBH,EAAKI,QACA,uCAIP,wBACGJ,EAAKR,KAAI,gBAAGa,EAAH,EAAGA,KAAH,OACR,2BACE,6BAAKA,EAAL,OAAgB,MADTA,EADD,KAOf,ECwCD,EAnD4B,WAAO,IAAD,IAChC,GAAgCC,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAEQC,GAAeC,EAAAA,EAAAA,MAAfD,WACFE,GAAWC,EAAAA,EAAAA,MAEXC,EAAI,qBADOC,EAAAA,EAAAA,MACKC,aAAZ,aAAG,EAAgBF,YAAnB,QAA2B,cAErCG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAwB,mCAAG,uFAC1BR,EAD0B,wDAK/BD,GAAa,GALkB,mBAQVU,EAAAA,EAAAA,IAAuB,CAAET,WAAAA,IARf,OAQvBX,EARuB,OAS7BM,EAAYN,GATiB,kDAW7BQ,EAAS,EAAD,IAXqB,yBAa7BE,GAAa,GAbgB,6EAAH,qDAiB9BS,GACD,GAAE,CAACR,IAIJ,OACE,iCACE,SAACU,EAAA,EAAD,IACChB,IACC,mBAAQiB,KAAK,SAASC,QANb,kBAAMV,EAASE,EAAf,EAMT,qBAIDV,IAAY,SAACmB,EAAD,CAAezB,MAAOM,IAClCI,IAAa,SAACgB,EAAA,EAAD,IACblB,IAAS,oDACV,SAAC,EAAAmB,SAAD,CAAUC,UAAU,SAACF,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAIP,C,+ICtDKG,EAAW,iCAEJC,EAAY,mCAAG,oGAASC,IAAAA,OAAT,MAAe,GAAf,WACLC,EAAAA,EAAAA,IAAA,UAChBH,EADgB,+BACeE,EADf,iBADK,cACpBE,EADoB,yBAInBA,GAJmB,2CAAH,sDAOZC,EAAsB,mCAAG,oGACfF,EAAAA,EAAAA,IAAA,UAChBH,EADgB,iDADe,cAC9BI,EAD8B,yBAI7BA,GAJ6B,2CAAH,qDAOtBZ,EAAsB,mCAAG,8FAAOT,EAAP,EAAOA,WAAP,SACfoB,EAAAA,EAAAA,IAAA,+EAAkFpB,EAAlF,iBADe,cAC9BqB,EAD8B,yBAE7BA,GAF6B,2CAAH,qD","sources":["components/AppBar/AppBar.jsx","components/Loader/Loader.jsx","components/VariableValue/VariableValue.jsx","pages/VariableDescription/VariableDescription.jsx","services/getSearchVin.jsx"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\n\nconst navItems = [\n    { href: '/', text: 'General' },\n    { href: '/variables', text: 'Variables' },\n  ];\n  \n  const AppBar = () => {\n      return (\n          <header>\n              <ul>\n                  {navItems.map(({ href, text }) => {\n                      if(href.includes(\"/variables\")) {\n                          return (\n                              <li key={href}>\n                                  <NavLink to={href}>{text}</NavLink>\n                              </li>\n                          )\n                      }    \n  \n                      return (\n                          <li key={href}>\n                              <NavLink to={href} end>{text}</NavLink>\n                          </li>\n                      )\n                  })}\n              </ul>\n          </header>\n      )\n  }\n  \n  export default AppBar;","import { MagnifyingGlass } from  'react-loader-spinner';\n\nconst Loader = () => {\n    return (    \n        <div>\n        <MagnifyingGlass \n            visible={true} \n            height=\"100\" \n            width=\"100\"\n            color='black'\n        />\n        </div>\n    )\n}\n\nexport default Loader;","import PropTypes from 'prop-types';\n\nconst VariablesValue = ({ items }) => {\n  const item = items.data.Results;\n\n  if (item.length === 0) {\n    return <p>No details</p>;\n  }\n\n  return (\n    <ul>\n      {item.map(({ Name }) => (\n        <li key={Name}>\n          <p> {Name} </p>{' '}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nVariablesValue.propTypes = {\n  items: PropTypes.object.isRequired,\n};\n\nexport default VariablesValue;\n","import { useState, useEffect, Suspense } from 'react';\nimport { useParams, Outlet, useLocation, useNavigate } from 'react-router-dom';\nimport AppBar from 'components/AppBar/AppBar';\nimport Loader from 'components/Loader/Loader';\nimport { getVariableDescription } from 'services/getSearchVin';\nimport VariableValue from 'components/VariableValue/VariableValue';\n\nconst VariableDescription = () => {\n  const [variable, setVariable] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { variableId } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const from = location.state?.from ?? '/variables';\n\n  useEffect(() => {\n    const fetchVariableDescription = async () => {\n      if (!variableId) {\n        return;\n      }\n\n      setIsLoading(true);\n\n      try {\n        const data = await getVariableDescription({ variableId });\n        setVariable(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchVariableDescription();\n  }, [variableId]);\n\n  const goBack = () => navigate(from);\n\n  return (\n    <>\n      <AppBar />\n      {variable && (\n        <button type=\"button\" onClick={goBack}>\n          Go back\n        </button>\n      )}\n      {variable && <VariableValue items={variable} />}\n      {isLoading && <Loader />}\n      {error && <p>Please try again later!</p>}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default VariableDescription;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://vpic.nhtsa.dot.gov/api';\n\nexport const getSearchVin = async ({ vin = '' }) => {\n  const result = await axios.get(\n    `${BASE_URL}/vehicles/decodevin/${vin}?format=json`\n  );\n  return result;\n};\n\nexport const getSearchVariablesList = async () => {\n  const result = await axios.get(\n    `${BASE_URL}/vehicles/getvehiclevariablelist?format=json`\n  );\n  return result;\n};\n\nexport const getVariableDescription = async({variableId} ) => {\n  const result = await axios.get(`https://vpic.nhtsa.dot.gov/api/vehicles/getvehiclevariablevalueslist/${variableId}?format=json`);\n  return result;\n};\n"],"names":["navItems","href","text","map","includes","to","end","visible","height","width","color","item","items","data","Results","length","Name","useState","variable","setVariable","error","setError","isLoading","setIsLoading","variableId","useParams","navigate","useNavigate","from","useLocation","state","useEffect","fetchVariableDescription","getVariableDescription","AppBar","type","onClick","VariableValue","Loader","Suspense","fallback","BASE_URL","getSearchVin","vin","axios","result","getSearchVariablesList"],"sourceRoot":""}