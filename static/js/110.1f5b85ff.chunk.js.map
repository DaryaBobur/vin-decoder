{"version":3,"file":"static/js/110.1f5b85ff.chunk.js","mappings":"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","sources":["components/AppBar/AppBar.jsx","components/Loader/Loader.jsx","../node_modules/nanoid/index.browser.js","components/FormSearchVin/FormSearchVin.jsx","components/VinList/VinList.jsx","components/VinCodeList/VinCodeList.jsx","pages/General/General.jsx","services/getSearchVin.jsx"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport '../AppBar/AppBar.css';\n\nconst navItems = [\n  { href: '/', text: 'General' },\n  { href: '/variables', text: 'Variables' },\n];\n\nconst AppBar = () => {\n  return (\n    <header className=\"header\">\n      <ul className=\"nav-list\">\n        {navItems.map(({ href, text }) => {\n          if (href.includes('/variables')) {\n            return (\n              <li key={href} className=\"nav-list__item\">\n                <NavLink to={href} className=\"nav-list__link\">\n                  {text}\n                </NavLink>\n              </li>\n            );\n          }\n\n          return (\n            <li key={href} className=\"nav-list__item\">\n              <NavLink to={href} className=\"nav-list__link\" end>\n                {text}\n              </NavLink>\n            </li>\n          );\n        })}\n      </ul>\n    </header>\n  );\n};\n\nexport default AppBar;\n","import { MagnifyingGlass } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <MagnifyingGlass visible={true} height=\"100\" width=\"100\" color=\"black\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../FormSearchVin/Form.css'\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst FormSearchVin = ({ onSubmit, add }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [code, setCode] = useState('');\n\n  const handleSearchQuery = e => {\n    setSearchQuery(e.currentTarget.value.toLowerCase().trim());\n    setCode(e.target.value.toLowerCase().trim());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const validationQuery = searchQuery.trim();\n    if (validationQuery === '') {\n      toast.error('Please enter a VIN code!');\n      return;\n    } else if (validationQuery.length < 17) {\n      toast.error('Please enter 17 character code');\n      return;\n    }\n\n    onSubmit(searchQuery);\n    add({ code });\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setSearchQuery('');\n    setCode('');\n  };\n  \n  return (\n    <>\n      <form className='form' onSubmit={handleSubmit}>\n        <input className='input'\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Enter VIN\"\n          onChange={handleSearchQuery}\n          name=\"searchQuery\"\n          value={searchQuery}\n          // pattern= \"/[^a-zA-Z0-9]/\"\n        />\n        <button className='btn-search' type=\"submit\">Search</button>\n      </form>\n    </>\n  );\n};\n\nFormSearchVin.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default FormSearchVin;\n","import PropTypes from 'prop-types';\nimport '../VinList/VinList.css'\nconst VinList = ({ items }) => {\n  const item = items.data.Results;\n\n  return (\n    <>\n      <h2 className='title'>Decode VIN</h2>\n      <ul className='decode-list'>\n        {item.map(\n          ({ Value, Variable, VariableId }) =>\n            Value !== null &&\n            Value !== '' &&\n            Value !== '0' && (\n              <li key={VariableId} className='decode-list__item'>\n                <p>\n                 <b>Variable:</b> {Variable}. <b>Value:</b> {Value}\n                </p>\n              </li>\n            )\n        )}\n      </ul>\n    </>\n  );\n};\n\nVinList.propTypes = {\n  items: PropTypes.object.isRequired,\n};\n\nexport default VinList;\n","import { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport '../VinCodeList/VinCodeList.css'\nconst VinCodeList = ({ codes }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <h2 className='subtitle'>History codes</h2>\n      <ul className='codes-list'>\n        {codes.slice(0, 5).map(({ code, id }) => (\n          <li key={id} className='codes-list__item'>\n            <NavLink className='codes-list__link' state={{ from: location }} to={`?vin=${code}`}>\n              <p><b>VIN code:</b> {code}</p>\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default VinCodeList;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport AppBar from 'components/AppBar/AppBar';\nimport FormSearchVin from 'components/FormSearchVin/FormSearchVin';\nimport VinList from 'components/VinList/VinList';\nimport Loader from 'components/Loader/Loader';\nimport { getSearchVin } from 'services/getSearchVin';\nimport VinCodeList from 'components/VinCodeList/VinCodeList';\n\nconst GeneralPage = () => {\n  const [items, setItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [codes, setCodes] = useState(\n    JSON.parse(localStorage.getItem('codes')) ?? []\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem('codes', JSON.stringify(codes));\n  }, [codes]);\n\n  const addCode = data => {\n    const code = {\n      id: nanoid(),\n      code: data.code,\n    };\n    setCodes(prevState => [code, ...prevState]);\n  };\n\n  const vin = searchParams.get('vin');\n\n  const onChangeQuery = vin => {\n    setSearchParams({ vin: vin });\n    setItems([]);\n  };\n\n  useEffect(() => {\n    const getSearchQuery = async () => {\n      if (!vin) {\n        return;\n      }\n      setIsLoading(true);\n\n      try {\n        const data = await getSearchVin({ vin });\n        setItems(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getSearchQuery();\n  }, [vin]);\n\n  return (\n    <>\n      <AppBar />\n      <FormSearchVin onSubmit={onChangeQuery} add={addCode} />\n      {codes.length !== 0 && <VinCodeList codes={codes} />}\n      {items.length !== 0 && (\n        <div>\n          <VinList items={items} />\n        </div>\n      )}\n      {isLoading && <Loader />}\n      {error && <p>Please try again later!</p>}\n    </>\n  );\n};\n\nexport default GeneralPage;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://vpic.nhtsa.dot.gov/api';\n\nexport const getSearchVin = async ({ vin = '' }) => {\n  const result = await axios.get(\n    `${BASE_URL}/vehicles/decodevin/${vin}?format=json`\n  );\n  return result;\n};\n\nexport const getSearchVariablesList = async () => {\n  const result = await axios.get(\n    `${BASE_URL}/vehicles/getvehiclevariablelist?format=json`\n  );\n  return result;\n};\n\nexport const getVariableDescription = async ({ variableId }) => {\n  const result = await axios.get(\n    `https://vpic.nhtsa.dot.gov/api/vehicles/getvehiclevariablevalueslist/${variableId}?format=json`\n  );\n  return result;\n};\n"],"names":["navItems","href","text","className","map","includes","to","end","visible","height","width","color","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","onSubmit","add","useState","searchQuery","setSearchQuery","code","setCode","resetForm","e","preventDefault","validationQuery","trim","length","toast","type","autoComplete","autoFocus","placeholder","onChange","currentTarget","value","toLowerCase","target","name","item","items","data","Results","Value","Variable","VariableId","codes","location","useLocation","slice","state","from","setItems","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","JSON","parse","localStorage","getItem","setCodes","useEffect","window","setItem","stringify","vin","get","getSearchQuery","getSearchVin","AppBar","prevState","Loader","BASE_URL","axios","result","getSearchVariablesList","getVariableDescription","variableId"],"sourceRoot":""}